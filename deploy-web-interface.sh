#!/bin/bash

# Script para desplegar la interfaz web a CloudFront
# Vehicle Tracking System

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Desplegando Interfaz Web a CloudFront${NC}"
echo "=============================================="

# Verificar que Terraform est√© disponible
if ! command -v terraform &> /dev/null; then
    echo -e "${RED}‚ùå Error: Terraform no est√° instalado${NC}"
    exit 1
fi

# Verificar que AWS CLI est√© configurado
if ! aws sts get-caller-identity &> /dev/null; then
    echo -e "${RED}‚ùå Error: AWS CLI no est√° configurado correctamente${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Herramientas verificadas${NC}"

# Navegar al directorio de Terraform
cd /home/labuser/vehicle-tracking-infrastructure

# Inicializar Terraform si es necesario
echo -e "${YELLOW}üì¶ Inicializando Terraform...${NC}"
export PATH=$HOME/bin:$PATH
terraform init -upgrade

# Planificar el despliegue
echo -e "${YELLOW}üìã Planificando despliegue de CloudFront...${NC}"
terraform plan -target=module.cloudfront_test

# Aplicar cambios
echo -e "${YELLOW}üöÄ Desplegando CloudFront...${NC}"
terraform apply -target=module.cloudfront_test -auto-approve

# Obtener informaci√≥n de la distribuci√≥n
echo -e "${BLUE}üìä Obteniendo informaci√≥n de CloudFront...${NC}"
CLOUDFRONT_URL=$(terraform output -raw web_interface_url 2>/dev/null || echo "No disponible")
DISTRIBUTION_ID=$(terraform output -raw web_interface_info 2>/dev/null | grep -o '"cloudfront_distribution_id":"[^"]*"' | cut -d'"' -f4 || echo "No disponible")
S3_BUCKET=$(terraform output -raw web_interface_info 2>/dev/null | grep -o '"s3_bucket_name":"[^"]*"' | cut -d'"' -f4 || echo "No disponible")

echo -e "\n${GREEN}‚úÖ Despliegue completado exitosamente${NC}"
echo "=========================================="
echo -e "${BLUE}üåê URL de la Interfaz Web:${NC} $CLOUDFRONT_URL"
echo -e "${BLUE}üì¶ Distribution ID:${NC} $DISTRIBUTION_ID"
echo -e "${BLUE}ü™£ S3 Bucket:${NC} $S3_BUCKET"

# Verificar el estado de la distribuci√≥n
if [ "$DISTRIBUTION_ID" != "No disponible" ]; then
    echo -e "\n${YELLOW}‚è≥ Verificando estado de la distribuci√≥n...${NC}"
    STATUS=$(aws cloudfront get-distribution --id "$DISTRIBUTION_ID" --query 'Distribution.Status' --output text 2>/dev/null || echo "Error")
    echo -e "${BLUE}üìä Estado:${NC} $STATUS"
    
    if [ "$STATUS" = "Deployed" ]; then
        echo -e "${GREEN}‚úÖ La distribuci√≥n est√° lista para usar${NC}"
    else
        echo -e "${YELLOW}‚è≥ La distribuci√≥n se est√° desplegando. Puede tomar 10-15 minutos.${NC}"
    fi
fi

# Mostrar informaci√≥n adicional
echo -e "\n${BLUE}üìù Informaci√≥n adicional:${NC}"
echo "- Los archivos se suben autom√°ticamente al bucket S3"
echo "- CloudFront cachea los archivos para mejor rendimiento"
echo "- La distribuci√≥n incluye compresi√≥n autom√°tica"
echo "- SSL/TLS est√° habilitado por defecto"
echo "- Los logs se almacenan en un bucket S3 separado"

echo -e "\n${BLUE}üîÑ Para actualizar la interfaz web:${NC}"
echo "1. Modificar archivos en ./web-interface/"
echo "2. Ejecutar: terraform apply -target=module.cloudfront_test"
echo "3. La invalidaci√≥n de cach√© se ejecuta autom√°ticamente"

echo -e "\n${BLUE}üõ†Ô∏è Comandos √∫tiles:${NC}"
echo "- Ver estado: aws cloudfront get-distribution --id $DISTRIBUTION_ID"
echo "- Invalidar cach√©: aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths '/*'"
echo "- Ver logs: aws s3 ls s3://$S3_BUCKET-logs/"

echo -e "\n${GREEN}üéâ ¬°Interfaz web disponible en CloudFront!${NC}"
